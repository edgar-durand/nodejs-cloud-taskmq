# Server Configuration
PORT=3000
NODE_ENV=development

# Storage Configuration
STORAGE_ADAPTER=memory
# Options: memory, redis, mongodb

# Redis Configuration (if using Redis adapter)
REDIS_URL=redis://localhost:6379
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# MongoDB Configuration (if using MongoDB adapter)
MONGODB_URL=mongodb://localhost:27017/cloudtaskmq-example

# Email Configuration (for email tasks)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password

# File Processing
UPLOAD_DIR=./uploads
PROCESSED_DIR=./processed

# Rate Limiting
ENABLE_RATE_LIMITING=true
RATE_LIMIT_MAX=100
RATE_LIMIT_WINDOW=60

# Google Cloud Platform Configuration (for real GCP Cloud Tasks integration)
# -----------------------------------------------------------------------------
# IMPORTANT: To actually send tasks to GCP Cloud Tasks, you need to:
# 1. Create a GCP project and enable Cloud Tasks API
# 2. Create Cloud Task queues in your project
# 3. Set up authentication (service account or ADC)
# 4. Configure the variables below

# GCP Project Configuration
GOOGLE_CLOUD_PROJECT=your-gcp-project-id
GCP_PROJECT_ID=your-gcp-project-id
GOOGLE_CLOUD_LOCATION=us-central1
GCP_LOCATION=us-central1

# GCP Authentication Options (choose one):
# Option 1: Service Account Key File (recommended for development)
GOOGLE_APPLICATION_CREDENTIALS=/path/to/your/service-account-key.json

# Option 2: Service Account Credentials as JSON string
# GOOGLE_CLOUD_CREDENTIALS={"type":"service_account","project_id":"..."}

# External URL for your server (required for GCP Cloud Tasks callbacks)
# This should be the publicly accessible URL where GCP can reach your processor endpoints
# For local development, you can use ngrok: https://ngrok.com/
EXTERNAL_URL=https://your-domain.com
# For ngrok: EXTERNAL_URL=https://abc123.ngrok.io

# Cloud Tasks Configuration
CLOUD_TASKS_AUTO_CREATE_QUEUES=true

# Task Configuration
MAX_RETRIES=3
TASK_TIMEOUT=30000
CONCURRENT_WORKERS=5
